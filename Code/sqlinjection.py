# -*- coding: utf-8 -*-
"""sqlInjection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XXNTK-yodFZn7R5NAk1ZnHWLKWBGNSWo
"""

import pandas as pd
import numpy as np
from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score,KFold, cross_val_predict
from sklearn.ensemble import BaggingClassifier, RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.linear_model import LogisticRegression

uploaded = files.upload()

data = pd.read_excel("/content/Final.xlsx")

data.head()

data = data.rename(columns={'Comment Characters': 'Comment','Number of semicolons':'semicolons','Logical Operator':'Logical','True conditions':'True','wild char':'wild_char'})

data.info()

sns.pairplot(data)

corr_matrix = data.corr()
corr_matrix['Label'].sort_values(ascending=False)

index = corr_matrix.index
plt.figure(figsize = (12,12))
g = sns.heatmap(corr_matrix[index].corr(), annot = True, cmap = "RdYlGn")

X = data.drop(['Label'], axis=1)
y = data['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X)

scores = cross_val_score(RandomForestClassifier(n_estimators=200),X_train,y,cv=10)
scores

np.mean(scores)

y_pred = cross_val_predict(RandomForestClassifier(n_estimators=200),X_train, y, cv=10)
conf_mat = confusion_matrix(y, y_pred)

conf_mat

rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train1,y_train)
pred_rfc = rfc.predict(X_test1)

print(classification_report(y_test,pred_rfc))

print(confusion_matrix(y_test, pred_rfc))

rfc.score(X_train1,y_train)*100

lr = LogisticRegression()
lr.fit(X_train1, y_train)
pred_lr = lr.predict(X_test1)

print(classification_report(y_test,pred_lr))

print(confusion_matrix(y_test, pred_lr))

lr.score(X_train1,y_train)*100

data1 = data.drop('semicolons', axis=1)

X = data1.drop('Label', axis=1)
y = data1['Label']

X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, y, test_size = 0.2, random_state = 42)

scaler = StandardScaler()
X_train2 = scaler.fit_transform(X_train_1)
X_test2 = scaler.transform(X_test_1)

rfc = RandomForestClassifier(n_estimators=200)
rfc.fit(X_train2,y_train_1)
pred_rfc = rfc.predict(X_test2)

print(classification_report(y_test_1,pred_rfc))

print(confusion_matrix(y_test_1, pred_rfc))